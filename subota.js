// Cтворіть функцію, яка отримує на вхід масив цілих чисел і
// повертає проміс.Проміс має виконатися тільки тоді, коли всі
// числа у вхідному масиві є парними.Якщо є хоча б одне непарне
// число, проміс має бути відхилено з відповідним повідомленням
// про помилку.

// Наприклад, якщо на вхід подається масив [2, 4, 6, 8], проміс
// повинен виконатися успішно.Але якщо на вхід подається масив
// [2, 4, 7, 8], проміс повинен бути відхилений з повідомленням
// про те, що є непарне число.

// function checkAllEven(arr) {
//   return new Promise((resolve, reject) => {
//     if (arr.every(el => el % 2 === 0)) {
//       resolve('every is even');
//     } else {
//       reject('some are odd');
//     }
//   });
// }
// checkAllEven([2, 4, 6, 8])
//   .then(resolve => console.log(resolve))
//   .catch(reject => console.log(reject));

// checkAllEven([2, 4, 7, 8])
//   .then(resolve => console.log(resolve))
//   .catch(reject => console.log(reject));

// / Створи гру "Вгадай число" з використанням промісів. Гравець буде
// вгадувати число від 1 до 10, і гра повідомлятиме йому, чи вірно
// відгадано число, чи ні.
// Виклик функції самостійно генерує таємне число, та просить користувача
// в prompt ввести його число, опрацюй випадки коли користувач скасовує введення або вводить не число.
// Якщо користувач ввів число яке збігається з таємним числом що
// згенеровано функцією вкажи що користувач переміг(resolve)
// Якщо користувач ввів число яке не збігається з таємним числом що
// згенеровано функцією вкажи що користувач програв(reject)
// Після завершення гри з будя яким результатом вкажи що "Гру завершено".
// Функція може генерувати тільки цілі числа від 1 до 10.
// Реалізуй функціонал який буде запитувати в користувача чи бажає він ще раз зіграти

// function generationNumber() {
//     const secretNumber = Math.floor(Math.random() * 10) + 1;
//     return new Promise((resolve, reject) => {
//         const userInput = promt("Вгадай число від 1 до 10")
//         if (!userInput) {
//             reject("Гра скасована користувачем")
//         };
//         const validateNumber = parseInt(userInput);
//         if (!validateNumber) {
//             reject("Введіть числове значення")
//         };
//         if (secretNumber === validateNumber) {
//             resolve(`Все вірно! Ви вгадали число:${secretNumber}`);
//         } else {
//              reject (`Не вірно! Загадане число:${secretNumber}`);
//         }
//     })
// }
// generationNumber()
//   .then(onResolve => console.log(onResolve))
//   .cetch(onReject => console.log(onReject))
//   .finali(oneMorTime);

//   function oneMorTime() {
//     const isAgree = confirm('Грати ще раз');
//     if (isAgree) {
//       generationNumber()
//         .then(onResolve => console.log(onResolve))
//         .cetch(onReject => console.log(onReject))
//         .finali(oneMorTime);
//     }
//       return
//   }

// / Завдання TODO LIST (https://ibb.co/tJNV95f)
// Створи форму за допомогою якої можливо додавати свої завдання до їх списку
// Форма має містити input для опису завдання та select для можливості вибору
// пріоритетності цього завдання(https://ibb.co/4msvtLc)
// Після сабміту форми відмалюй завдання в списку
// Кожен елемент списку має містити: опис завдання, його пріоритетність,
// кнопку, щоб позначити його як виконане та кнопку для можливості видалення
// цього завдання(https://ibb.co/GJwsbRz)
// Після того, як статус завдання змінився на виконаний, текст завдання потрібно
// перекреслити, фон має змінитись на зелений, а кнопка для зміни статусу має зникнути(https://ibb.co/S0Z81bg)
// Після кліку на кнопку видалити, завдання видаляється зі списку
// Після перезавантаження сторінки всі завдання зберігаються в списку відповідно до свого статусу
// Додай можливість сортування списку завдань (https://ibb.co/CBhR78H)
